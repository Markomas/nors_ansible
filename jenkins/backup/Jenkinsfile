pipeline {
    agent any

    options {
       ansiColor('xterm')
    }

    stages {
        stage('Get ansible inventory') {
            steps {
                copyArtifacts filter: 'nors_news_ansible_inventory.yml', fingerprintArtifacts: true, projectName: env.TERRAFORM_JOB_NAME
            }
        }

        stage('Backup database') {
            steps {
                ansiblePlaybook(
                        playbook: 'database_backup.yml',
                        inventory: 'nors_news_ansible_inventory.yml',
                        credentialsId: 'jenkins_agent',
                        colorized: true
                        )
            }
        }

        stage('Upload dump to backup') {
            steps {
                ftpPublisher alwaysPublishFromMaster: true, masterNodeName: '', paramPublish: [parameterName:""], continueOnError: false, failOnError: false, publishers: [
                    [configName: 'bubilas', transfers: [
                        [asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory:'database_backup_news', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'jenkins/backup/*.sql.gz']
                    ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]
                ]
            }
        }

        stage('Save artefacts') {
            steps {
                archiveArtifacts(artifacts: 'jenkins/backup/dump.sql.gz', fingerprint: true, onlyIfSuccessful: true)
            }
        }
    }
}